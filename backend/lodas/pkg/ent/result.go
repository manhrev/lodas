// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/result"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/schema"
)

// Result is the model entity for the Result schema.
type Result struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Province holds the value of the "province" field.
	Province int64 `json:"province,omitempty"`
	// CreatedTime holds the value of the "created_time" field.
	CreatedTime time.Time `json:"created_time,omitempty"`
	// PrizeMap holds the value of the "prize_map" field.
	PrizeMap *schema.PrizeMap `json:"prize_map,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Result) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case result.FieldPrizeMap:
			values[i] = new([]byte)
		case result.FieldID, result.FieldProvince:
			values[i] = new(sql.NullInt64)
		case result.FieldCreatedTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Result", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Result fields.
func (r *Result) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case result.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int64(value.Int64)
		case result.FieldProvince:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field province", values[i])
			} else if value.Valid {
				r.Province = value.Int64
			}
		case result.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				r.CreatedTime = value.Time
			}
		case result.FieldPrizeMap:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field prize_map", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.PrizeMap); err != nil {
					return fmt.Errorf("unmarshal field prize_map: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Result.
// Note that you need to call Result.Unwrap() before calling this method if this Result
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Result) Update() *ResultUpdateOne {
	return NewResultClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Result entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Result) Unwrap() *Result {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Result is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Result) String() string {
	var builder strings.Builder
	builder.WriteString("Result(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("province=")
	builder.WriteString(fmt.Sprintf("%v", r.Province))
	builder.WriteString(", ")
	builder.WriteString("created_time=")
	builder.WriteString(r.CreatedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("prize_map=")
	builder.WriteString(fmt.Sprintf("%v", r.PrizeMap))
	builder.WriteByte(')')
	return builder.String()
}

// Results is a parsable slice of Result.
type Results []*Result

func (r Results) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
