// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/betsetting"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/schema"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/sheet"
)

// BetSettingCreate is the builder for creating a BetSetting entity.
type BetSettingCreate struct {
	config
	mutation *BetSettingMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (bsc *BetSettingCreate) SetUserID(i int64) *BetSettingCreate {
	bsc.mutation.SetUserID(i)
	return bsc
}

// SetValues sets the "values" field.
func (bsc *BetSettingCreate) SetValues(ssm *schema.BetSettingMap) *BetSettingCreate {
	bsc.mutation.SetValues(ssm)
	return bsc
}

// SetCreatedTime sets the "created_time" field.
func (bsc *BetSettingCreate) SetCreatedTime(t time.Time) *BetSettingCreate {
	bsc.mutation.SetCreatedTime(t)
	return bsc
}

// SetID sets the "id" field.
func (bsc *BetSettingCreate) SetID(i int64) *BetSettingCreate {
	bsc.mutation.SetID(i)
	return bsc
}

// AddSheetIDs adds the "sheets" edge to the Sheet entity by IDs.
func (bsc *BetSettingCreate) AddSheetIDs(ids ...int64) *BetSettingCreate {
	bsc.mutation.AddSheetIDs(ids...)
	return bsc
}

// AddSheets adds the "sheets" edges to the Sheet entity.
func (bsc *BetSettingCreate) AddSheets(s ...*Sheet) *BetSettingCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bsc.AddSheetIDs(ids...)
}

// Mutation returns the BetSettingMutation object of the builder.
func (bsc *BetSettingCreate) Mutation() *BetSettingMutation {
	return bsc.mutation
}

// Save creates the BetSetting in the database.
func (bsc *BetSettingCreate) Save(ctx context.Context) (*BetSetting, error) {
	return withHooks[*BetSetting, BetSettingMutation](ctx, bsc.sqlSave, bsc.mutation, bsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bsc *BetSettingCreate) SaveX(ctx context.Context) *BetSetting {
	v, err := bsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bsc *BetSettingCreate) Exec(ctx context.Context) error {
	_, err := bsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsc *BetSettingCreate) ExecX(ctx context.Context) {
	if err := bsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsc *BetSettingCreate) check() error {
	if _, ok := bsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "BetSetting.user_id"`)}
	}
	if _, ok := bsc.mutation.Values(); !ok {
		return &ValidationError{Name: "values", err: errors.New(`ent: missing required field "BetSetting.values"`)}
	}
	if _, ok := bsc.mutation.CreatedTime(); !ok {
		return &ValidationError{Name: "created_time", err: errors.New(`ent: missing required field "BetSetting.created_time"`)}
	}
	return nil
}

func (bsc *BetSettingCreate) sqlSave(ctx context.Context) (*BetSetting, error) {
	if err := bsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	bsc.mutation.id = &_node.ID
	bsc.mutation.done = true
	return _node, nil
}

func (bsc *BetSettingCreate) createSpec() (*BetSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &BetSetting{config: bsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: betsetting.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: betsetting.FieldID,
			},
		}
	)
	if id, ok := bsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bsc.mutation.UserID(); ok {
		_spec.SetField(betsetting.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := bsc.mutation.Values(); ok {
		_spec.SetField(betsetting.FieldValues, field.TypeJSON, value)
		_node.Values = value
	}
	if value, ok := bsc.mutation.CreatedTime(); ok {
		_spec.SetField(betsetting.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = value
	}
	if nodes := bsc.mutation.SheetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   betsetting.SheetsTable,
			Columns: []string{betsetting.SheetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sheet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BetSettingCreateBulk is the builder for creating many BetSetting entities in bulk.
type BetSettingCreateBulk struct {
	config
	builders []*BetSettingCreate
}

// Save creates the BetSetting entities in the database.
func (bscb *BetSettingCreateBulk) Save(ctx context.Context) ([]*BetSetting, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bscb.builders))
	nodes := make([]*BetSetting, len(bscb.builders))
	mutators := make([]Mutator, len(bscb.builders))
	for i := range bscb.builders {
		func(i int, root context.Context) {
			builder := bscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BetSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bscb *BetSettingCreateBulk) SaveX(ctx context.Context) []*BetSetting {
	v, err := bscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bscb *BetSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := bscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bscb *BetSettingCreateBulk) ExecX(ctx context.Context) {
	if err := bscb.Exec(ctx); err != nil {
		panic(err)
	}
}
