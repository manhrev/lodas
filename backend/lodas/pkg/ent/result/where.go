// Code generated by ent, DO NOT EDIT.

package result

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Result {
	return predicate.Result(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Result {
	return predicate.Result(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Result {
	return predicate.Result(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Result {
	return predicate.Result(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Result {
	return predicate.Result(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Result {
	return predicate.Result(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Result {
	return predicate.Result(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Result {
	return predicate.Result(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Result {
	return predicate.Result(sql.FieldLTE(FieldID, id))
}

// Province applies equality check predicate on the "province" field. It's identical to ProvinceEQ.
func Province(v int64) predicate.Result {
	return predicate.Result(sql.FieldEQ(FieldProvince, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.Result {
	return predicate.Result(sql.FieldEQ(FieldCreatedTime, v))
}

// ProvinceEQ applies the EQ predicate on the "province" field.
func ProvinceEQ(v int64) predicate.Result {
	return predicate.Result(sql.FieldEQ(FieldProvince, v))
}

// ProvinceNEQ applies the NEQ predicate on the "province" field.
func ProvinceNEQ(v int64) predicate.Result {
	return predicate.Result(sql.FieldNEQ(FieldProvince, v))
}

// ProvinceIn applies the In predicate on the "province" field.
func ProvinceIn(vs ...int64) predicate.Result {
	return predicate.Result(sql.FieldIn(FieldProvince, vs...))
}

// ProvinceNotIn applies the NotIn predicate on the "province" field.
func ProvinceNotIn(vs ...int64) predicate.Result {
	return predicate.Result(sql.FieldNotIn(FieldProvince, vs...))
}

// ProvinceGT applies the GT predicate on the "province" field.
func ProvinceGT(v int64) predicate.Result {
	return predicate.Result(sql.FieldGT(FieldProvince, v))
}

// ProvinceGTE applies the GTE predicate on the "province" field.
func ProvinceGTE(v int64) predicate.Result {
	return predicate.Result(sql.FieldGTE(FieldProvince, v))
}

// ProvinceLT applies the LT predicate on the "province" field.
func ProvinceLT(v int64) predicate.Result {
	return predicate.Result(sql.FieldLT(FieldProvince, v))
}

// ProvinceLTE applies the LTE predicate on the "province" field.
func ProvinceLTE(v int64) predicate.Result {
	return predicate.Result(sql.FieldLTE(FieldProvince, v))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.Result {
	return predicate.Result(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.Result {
	return predicate.Result(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.Result {
	return predicate.Result(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.Result {
	return predicate.Result(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.Result {
	return predicate.Result(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.Result {
	return predicate.Result(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.Result {
	return predicate.Result(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.Result {
	return predicate.Result(sql.FieldLTE(FieldCreatedTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Result) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Result) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Result) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		p(s.Not())
	})
}
