// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/betsetting"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/schema"
)

// BetSetting is the model entity for the BetSetting schema.
type BetSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// Values holds the value of the "values" field.
	Values *schema.BetSettingMap `json:"values,omitempty"`
	// CreatedTime holds the value of the "created_time" field.
	CreatedTime time.Time `json:"created_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BetSettingQuery when eager-loading is set.
	Edges BetSettingEdges `json:"edges"`
}

// BetSettingEdges holds the relations/edges for other nodes in the graph.
type BetSettingEdges struct {
	// Sheets holds the value of the sheets edge.
	Sheets []*Sheet `json:"sheets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SheetsOrErr returns the Sheets value or an error if the edge
// was not loaded in eager-loading.
func (e BetSettingEdges) SheetsOrErr() ([]*Sheet, error) {
	if e.loadedTypes[0] {
		return e.Sheets, nil
	}
	return nil, &NotLoadedError{edge: "sheets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BetSetting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case betsetting.FieldValues:
			values[i] = new([]byte)
		case betsetting.FieldID, betsetting.FieldUserID:
			values[i] = new(sql.NullInt64)
		case betsetting.FieldCreatedTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BetSetting", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BetSetting fields.
func (bs *BetSetting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case betsetting.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bs.ID = int64(value.Int64)
		case betsetting.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				bs.UserID = value.Int64
			}
		case betsetting.FieldValues:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field values", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bs.Values); err != nil {
					return fmt.Errorf("unmarshal field values: %w", err)
				}
			}
		case betsetting.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				bs.CreatedTime = value.Time
			}
		}
	}
	return nil
}

// QuerySheets queries the "sheets" edge of the BetSetting entity.
func (bs *BetSetting) QuerySheets() *SheetQuery {
	return NewBetSettingClient(bs.config).QuerySheets(bs)
}

// Update returns a builder for updating this BetSetting.
// Note that you need to call BetSetting.Unwrap() before calling this method if this BetSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (bs *BetSetting) Update() *BetSettingUpdateOne {
	return NewBetSettingClient(bs.config).UpdateOne(bs)
}

// Unwrap unwraps the BetSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bs *BetSetting) Unwrap() *BetSetting {
	_tx, ok := bs.config.driver.(*txDriver)
	if !ok {
		panic("ent: BetSetting is not a transactional entity")
	}
	bs.config.driver = _tx.drv
	return bs
}

// String implements the fmt.Stringer.
func (bs *BetSetting) String() string {
	var builder strings.Builder
	builder.WriteString("BetSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bs.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", bs.UserID))
	builder.WriteString(", ")
	builder.WriteString("values=")
	builder.WriteString(fmt.Sprintf("%v", bs.Values))
	builder.WriteString(", ")
	builder.WriteString("created_time=")
	builder.WriteString(bs.CreatedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BetSettings is a parsable slice of BetSetting.
type BetSettings []*BetSetting

func (bs BetSettings) config(cfg config) {
	for _i := range bs {
		bs[_i].config = cfg
	}
}
