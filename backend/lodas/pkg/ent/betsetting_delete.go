// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/betsetting"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/predicate"
)

// BetSettingDelete is the builder for deleting a BetSetting entity.
type BetSettingDelete struct {
	config
	hooks    []Hook
	mutation *BetSettingMutation
}

// Where appends a list predicates to the BetSettingDelete builder.
func (bsd *BetSettingDelete) Where(ps ...predicate.BetSetting) *BetSettingDelete {
	bsd.mutation.Where(ps...)
	return bsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bsd *BetSettingDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, BetSettingMutation](ctx, bsd.sqlExec, bsd.mutation, bsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bsd *BetSettingDelete) ExecX(ctx context.Context) int {
	n, err := bsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bsd *BetSettingDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: betsetting.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: betsetting.FieldID,
			},
		},
	}
	if ps := bsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bsd.mutation.done = true
	return affected, err
}

// BetSettingDeleteOne is the builder for deleting a single BetSetting entity.
type BetSettingDeleteOne struct {
	bsd *BetSettingDelete
}

// Where appends a list predicates to the BetSettingDelete builder.
func (bsdo *BetSettingDeleteOne) Where(ps ...predicate.BetSetting) *BetSettingDeleteOne {
	bsdo.bsd.mutation.Where(ps...)
	return bsdo
}

// Exec executes the deletion query.
func (bsdo *BetSettingDeleteOne) Exec(ctx context.Context) error {
	n, err := bsdo.bsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{betsetting.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bsdo *BetSettingDeleteOne) ExecX(ctx context.Context) {
	if err := bsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
