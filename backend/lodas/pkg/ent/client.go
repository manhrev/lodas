// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/manhrev/lodas/backend/lodas/pkg/ent/migrate"

	"github.com/manhrev/lodas/backend/lodas/pkg/ent/betsetting"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/record"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/result"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/sheet"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// BetSetting is the client for interacting with the BetSetting builders.
	BetSetting *BetSettingClient
	// Record is the client for interacting with the Record builders.
	Record *RecordClient
	// Result is the client for interacting with the Result builders.
	Result *ResultClient
	// Sheet is the client for interacting with the Sheet builders.
	Sheet *SheetClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.BetSetting = NewBetSettingClient(c.config)
	c.Record = NewRecordClient(c.config)
	c.Result = NewResultClient(c.config)
	c.Sheet = NewSheetClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		BetSetting: NewBetSettingClient(cfg),
		Record:     NewRecordClient(cfg),
		Result:     NewResultClient(cfg),
		Sheet:      NewSheetClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		BetSetting: NewBetSettingClient(cfg),
		Record:     NewRecordClient(cfg),
		Result:     NewResultClient(cfg),
		Sheet:      NewSheetClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		BetSetting.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.BetSetting.Use(hooks...)
	c.Record.Use(hooks...)
	c.Result.Use(hooks...)
	c.Sheet.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.BetSetting.Intercept(interceptors...)
	c.Record.Intercept(interceptors...)
	c.Result.Intercept(interceptors...)
	c.Sheet.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BetSettingMutation:
		return c.BetSetting.mutate(ctx, m)
	case *RecordMutation:
		return c.Record.mutate(ctx, m)
	case *ResultMutation:
		return c.Result.mutate(ctx, m)
	case *SheetMutation:
		return c.Sheet.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BetSettingClient is a client for the BetSetting schema.
type BetSettingClient struct {
	config
}

// NewBetSettingClient returns a client for the BetSetting from the given config.
func NewBetSettingClient(c config) *BetSettingClient {
	return &BetSettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `betsetting.Hooks(f(g(h())))`.
func (c *BetSettingClient) Use(hooks ...Hook) {
	c.hooks.BetSetting = append(c.hooks.BetSetting, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `betsetting.Intercept(f(g(h())))`.
func (c *BetSettingClient) Intercept(interceptors ...Interceptor) {
	c.inters.BetSetting = append(c.inters.BetSetting, interceptors...)
}

// Create returns a builder for creating a BetSetting entity.
func (c *BetSettingClient) Create() *BetSettingCreate {
	mutation := newBetSettingMutation(c.config, OpCreate)
	return &BetSettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BetSetting entities.
func (c *BetSettingClient) CreateBulk(builders ...*BetSettingCreate) *BetSettingCreateBulk {
	return &BetSettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BetSetting.
func (c *BetSettingClient) Update() *BetSettingUpdate {
	mutation := newBetSettingMutation(c.config, OpUpdate)
	return &BetSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BetSettingClient) UpdateOne(bs *BetSetting) *BetSettingUpdateOne {
	mutation := newBetSettingMutation(c.config, OpUpdateOne, withBetSetting(bs))
	return &BetSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BetSettingClient) UpdateOneID(id int64) *BetSettingUpdateOne {
	mutation := newBetSettingMutation(c.config, OpUpdateOne, withBetSettingID(id))
	return &BetSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BetSetting.
func (c *BetSettingClient) Delete() *BetSettingDelete {
	mutation := newBetSettingMutation(c.config, OpDelete)
	return &BetSettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BetSettingClient) DeleteOne(bs *BetSetting) *BetSettingDeleteOne {
	return c.DeleteOneID(bs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BetSettingClient) DeleteOneID(id int64) *BetSettingDeleteOne {
	builder := c.Delete().Where(betsetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BetSettingDeleteOne{builder}
}

// Query returns a query builder for BetSetting.
func (c *BetSettingClient) Query() *BetSettingQuery {
	return &BetSettingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBetSetting},
		inters: c.Interceptors(),
	}
}

// Get returns a BetSetting entity by its id.
func (c *BetSettingClient) Get(ctx context.Context, id int64) (*BetSetting, error) {
	return c.Query().Where(betsetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BetSettingClient) GetX(ctx context.Context, id int64) *BetSetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySheets queries the sheets edge of a BetSetting.
func (c *BetSettingClient) QuerySheets(bs *BetSetting) *SheetQuery {
	query := (&SheetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(betsetting.Table, betsetting.FieldID, id),
			sqlgraph.To(sheet.Table, sheet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, betsetting.SheetsTable, betsetting.SheetsColumn),
		)
		fromV = sqlgraph.Neighbors(bs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BetSettingClient) Hooks() []Hook {
	return c.hooks.BetSetting
}

// Interceptors returns the client interceptors.
func (c *BetSettingClient) Interceptors() []Interceptor {
	return c.inters.BetSetting
}

func (c *BetSettingClient) mutate(ctx context.Context, m *BetSettingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BetSettingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BetSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BetSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BetSettingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BetSetting mutation op: %q", m.Op())
	}
}

// RecordClient is a client for the Record schema.
type RecordClient struct {
	config
}

// NewRecordClient returns a client for the Record from the given config.
func NewRecordClient(c config) *RecordClient {
	return &RecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `record.Hooks(f(g(h())))`.
func (c *RecordClient) Use(hooks ...Hook) {
	c.hooks.Record = append(c.hooks.Record, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `record.Intercept(f(g(h())))`.
func (c *RecordClient) Intercept(interceptors ...Interceptor) {
	c.inters.Record = append(c.inters.Record, interceptors...)
}

// Create returns a builder for creating a Record entity.
func (c *RecordClient) Create() *RecordCreate {
	mutation := newRecordMutation(c.config, OpCreate)
	return &RecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Record entities.
func (c *RecordClient) CreateBulk(builders ...*RecordCreate) *RecordCreateBulk {
	return &RecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Record.
func (c *RecordClient) Update() *RecordUpdate {
	mutation := newRecordMutation(c.config, OpUpdate)
	return &RecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecordClient) UpdateOne(r *Record) *RecordUpdateOne {
	mutation := newRecordMutation(c.config, OpUpdateOne, withRecord(r))
	return &RecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecordClient) UpdateOneID(id int64) *RecordUpdateOne {
	mutation := newRecordMutation(c.config, OpUpdateOne, withRecordID(id))
	return &RecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Record.
func (c *RecordClient) Delete() *RecordDelete {
	mutation := newRecordMutation(c.config, OpDelete)
	return &RecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RecordClient) DeleteOne(r *Record) *RecordDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RecordClient) DeleteOneID(id int64) *RecordDeleteOne {
	builder := c.Delete().Where(record.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecordDeleteOne{builder}
}

// Query returns a query builder for Record.
func (c *RecordClient) Query() *RecordQuery {
	return &RecordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRecord},
		inters: c.Interceptors(),
	}
}

// Get returns a Record entity by its id.
func (c *RecordClient) Get(ctx context.Context, id int64) (*Record, error) {
	return c.Query().Where(record.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecordClient) GetX(ctx context.Context, id int64) *Record {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySheet queries the sheet edge of a Record.
func (c *RecordClient) QuerySheet(r *Record) *SheetQuery {
	query := (&SheetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(record.Table, record.FieldID, id),
			sqlgraph.To(sheet.Table, sheet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, record.SheetTable, record.SheetColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecordClient) Hooks() []Hook {
	return c.hooks.Record
}

// Interceptors returns the client interceptors.
func (c *RecordClient) Interceptors() []Interceptor {
	return c.inters.Record
}

func (c *RecordClient) mutate(ctx context.Context, m *RecordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RecordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RecordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RecordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Record mutation op: %q", m.Op())
	}
}

// ResultClient is a client for the Result schema.
type ResultClient struct {
	config
}

// NewResultClient returns a client for the Result from the given config.
func NewResultClient(c config) *ResultClient {
	return &ResultClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `result.Hooks(f(g(h())))`.
func (c *ResultClient) Use(hooks ...Hook) {
	c.hooks.Result = append(c.hooks.Result, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `result.Intercept(f(g(h())))`.
func (c *ResultClient) Intercept(interceptors ...Interceptor) {
	c.inters.Result = append(c.inters.Result, interceptors...)
}

// Create returns a builder for creating a Result entity.
func (c *ResultClient) Create() *ResultCreate {
	mutation := newResultMutation(c.config, OpCreate)
	return &ResultCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Result entities.
func (c *ResultClient) CreateBulk(builders ...*ResultCreate) *ResultCreateBulk {
	return &ResultCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Result.
func (c *ResultClient) Update() *ResultUpdate {
	mutation := newResultMutation(c.config, OpUpdate)
	return &ResultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResultClient) UpdateOne(r *Result) *ResultUpdateOne {
	mutation := newResultMutation(c.config, OpUpdateOne, withResult(r))
	return &ResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResultClient) UpdateOneID(id int64) *ResultUpdateOne {
	mutation := newResultMutation(c.config, OpUpdateOne, withResultID(id))
	return &ResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Result.
func (c *ResultClient) Delete() *ResultDelete {
	mutation := newResultMutation(c.config, OpDelete)
	return &ResultDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResultClient) DeleteOne(r *Result) *ResultDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResultClient) DeleteOneID(id int64) *ResultDeleteOne {
	builder := c.Delete().Where(result.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResultDeleteOne{builder}
}

// Query returns a query builder for Result.
func (c *ResultClient) Query() *ResultQuery {
	return &ResultQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResult},
		inters: c.Interceptors(),
	}
}

// Get returns a Result entity by its id.
func (c *ResultClient) Get(ctx context.Context, id int64) (*Result, error) {
	return c.Query().Where(result.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResultClient) GetX(ctx context.Context, id int64) *Result {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ResultClient) Hooks() []Hook {
	return c.hooks.Result
}

// Interceptors returns the client interceptors.
func (c *ResultClient) Interceptors() []Interceptor {
	return c.inters.Result
}

func (c *ResultClient) mutate(ctx context.Context, m *ResultMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResultCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResultUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResultDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Result mutation op: %q", m.Op())
	}
}

// SheetClient is a client for the Sheet schema.
type SheetClient struct {
	config
}

// NewSheetClient returns a client for the Sheet from the given config.
func NewSheetClient(c config) *SheetClient {
	return &SheetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sheet.Hooks(f(g(h())))`.
func (c *SheetClient) Use(hooks ...Hook) {
	c.hooks.Sheet = append(c.hooks.Sheet, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sheet.Intercept(f(g(h())))`.
func (c *SheetClient) Intercept(interceptors ...Interceptor) {
	c.inters.Sheet = append(c.inters.Sheet, interceptors...)
}

// Create returns a builder for creating a Sheet entity.
func (c *SheetClient) Create() *SheetCreate {
	mutation := newSheetMutation(c.config, OpCreate)
	return &SheetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Sheet entities.
func (c *SheetClient) CreateBulk(builders ...*SheetCreate) *SheetCreateBulk {
	return &SheetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Sheet.
func (c *SheetClient) Update() *SheetUpdate {
	mutation := newSheetMutation(c.config, OpUpdate)
	return &SheetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SheetClient) UpdateOne(s *Sheet) *SheetUpdateOne {
	mutation := newSheetMutation(c.config, OpUpdateOne, withSheet(s))
	return &SheetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SheetClient) UpdateOneID(id int64) *SheetUpdateOne {
	mutation := newSheetMutation(c.config, OpUpdateOne, withSheetID(id))
	return &SheetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Sheet.
func (c *SheetClient) Delete() *SheetDelete {
	mutation := newSheetMutation(c.config, OpDelete)
	return &SheetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SheetClient) DeleteOne(s *Sheet) *SheetDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SheetClient) DeleteOneID(id int64) *SheetDeleteOne {
	builder := c.Delete().Where(sheet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SheetDeleteOne{builder}
}

// Query returns a query builder for Sheet.
func (c *SheetClient) Query() *SheetQuery {
	return &SheetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSheet},
		inters: c.Interceptors(),
	}
}

// Get returns a Sheet entity by its id.
func (c *SheetClient) Get(ctx context.Context, id int64) (*Sheet, error) {
	return c.Query().Where(sheet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SheetClient) GetX(ctx context.Context, id int64) *Sheet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRecords queries the records edge of a Sheet.
func (c *SheetClient) QueryRecords(s *Sheet) *RecordQuery {
	query := (&RecordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sheet.Table, sheet.FieldID, id),
			sqlgraph.To(record.Table, record.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sheet.RecordsTable, sheet.RecordsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBetSetting queries the bet_setting edge of a Sheet.
func (c *SheetClient) QueryBetSetting(s *Sheet) *BetSettingQuery {
	query := (&BetSettingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sheet.Table, sheet.FieldID, id),
			sqlgraph.To(betsetting.Table, betsetting.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sheet.BetSettingTable, sheet.BetSettingColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SheetClient) Hooks() []Hook {
	return c.hooks.Sheet
}

// Interceptors returns the client interceptors.
func (c *SheetClient) Interceptors() []Interceptor {
	return c.inters.Sheet
}

func (c *SheetClient) mutate(ctx context.Context, m *SheetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SheetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SheetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SheetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SheetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Sheet mutation op: %q", m.Op())
	}
}
