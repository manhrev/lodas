// Code generated by ent, DO NOT EDIT.

package sheet

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldLTE(FieldID, id))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldEQ(FieldStatus, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Sheet {
	return predicate.Sheet(sql.FieldEQ(FieldName, v))
}

// Area applies equality check predicate on the "area" field. It's identical to AreaEQ.
func Area(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldEQ(FieldArea, v))
}

// Province applies equality check predicate on the "province" field. It's identical to ProvinceEQ.
func Province(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldEQ(FieldProvince, v))
}

// Ratio applies equality check predicate on the "ratio" field. It's identical to RatioEQ.
func Ratio(v float64) predicate.Sheet {
	return predicate.Sheet(sql.FieldEQ(FieldRatio, v))
}

// ResultTime applies equality check predicate on the "result_time" field. It's identical to ResultTimeEQ.
func ResultTime(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldEQ(FieldResultTime, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldEQ(FieldCreatedTime, v))
}

// UpdatedTime applies equality check predicate on the "updated_time" field. It's identical to UpdatedTimeEQ.
func UpdatedTime(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldEQ(FieldUpdatedTime, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldEQ(FieldUserID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldLTE(FieldStatus, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Sheet {
	return predicate.Sheet(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Sheet {
	return predicate.Sheet(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Sheet {
	return predicate.Sheet(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Sheet {
	return predicate.Sheet(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Sheet {
	return predicate.Sheet(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Sheet {
	return predicate.Sheet(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Sheet {
	return predicate.Sheet(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Sheet {
	return predicate.Sheet(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Sheet {
	return predicate.Sheet(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Sheet {
	return predicate.Sheet(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Sheet {
	return predicate.Sheet(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Sheet {
	return predicate.Sheet(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Sheet {
	return predicate.Sheet(sql.FieldContainsFold(FieldName, v))
}

// AreaEQ applies the EQ predicate on the "area" field.
func AreaEQ(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldEQ(FieldArea, v))
}

// AreaNEQ applies the NEQ predicate on the "area" field.
func AreaNEQ(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldNEQ(FieldArea, v))
}

// AreaIn applies the In predicate on the "area" field.
func AreaIn(vs ...int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldIn(FieldArea, vs...))
}

// AreaNotIn applies the NotIn predicate on the "area" field.
func AreaNotIn(vs ...int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldNotIn(FieldArea, vs...))
}

// AreaGT applies the GT predicate on the "area" field.
func AreaGT(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldGT(FieldArea, v))
}

// AreaGTE applies the GTE predicate on the "area" field.
func AreaGTE(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldGTE(FieldArea, v))
}

// AreaLT applies the LT predicate on the "area" field.
func AreaLT(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldLT(FieldArea, v))
}

// AreaLTE applies the LTE predicate on the "area" field.
func AreaLTE(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldLTE(FieldArea, v))
}

// ProvinceEQ applies the EQ predicate on the "province" field.
func ProvinceEQ(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldEQ(FieldProvince, v))
}

// ProvinceNEQ applies the NEQ predicate on the "province" field.
func ProvinceNEQ(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldNEQ(FieldProvince, v))
}

// ProvinceIn applies the In predicate on the "province" field.
func ProvinceIn(vs ...int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldIn(FieldProvince, vs...))
}

// ProvinceNotIn applies the NotIn predicate on the "province" field.
func ProvinceNotIn(vs ...int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldNotIn(FieldProvince, vs...))
}

// ProvinceGT applies the GT predicate on the "province" field.
func ProvinceGT(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldGT(FieldProvince, v))
}

// ProvinceGTE applies the GTE predicate on the "province" field.
func ProvinceGTE(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldGTE(FieldProvince, v))
}

// ProvinceLT applies the LT predicate on the "province" field.
func ProvinceLT(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldLT(FieldProvince, v))
}

// ProvinceLTE applies the LTE predicate on the "province" field.
func ProvinceLTE(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldLTE(FieldProvince, v))
}

// RatioEQ applies the EQ predicate on the "ratio" field.
func RatioEQ(v float64) predicate.Sheet {
	return predicate.Sheet(sql.FieldEQ(FieldRatio, v))
}

// RatioNEQ applies the NEQ predicate on the "ratio" field.
func RatioNEQ(v float64) predicate.Sheet {
	return predicate.Sheet(sql.FieldNEQ(FieldRatio, v))
}

// RatioIn applies the In predicate on the "ratio" field.
func RatioIn(vs ...float64) predicate.Sheet {
	return predicate.Sheet(sql.FieldIn(FieldRatio, vs...))
}

// RatioNotIn applies the NotIn predicate on the "ratio" field.
func RatioNotIn(vs ...float64) predicate.Sheet {
	return predicate.Sheet(sql.FieldNotIn(FieldRatio, vs...))
}

// RatioGT applies the GT predicate on the "ratio" field.
func RatioGT(v float64) predicate.Sheet {
	return predicate.Sheet(sql.FieldGT(FieldRatio, v))
}

// RatioGTE applies the GTE predicate on the "ratio" field.
func RatioGTE(v float64) predicate.Sheet {
	return predicate.Sheet(sql.FieldGTE(FieldRatio, v))
}

// RatioLT applies the LT predicate on the "ratio" field.
func RatioLT(v float64) predicate.Sheet {
	return predicate.Sheet(sql.FieldLT(FieldRatio, v))
}

// RatioLTE applies the LTE predicate on the "ratio" field.
func RatioLTE(v float64) predicate.Sheet {
	return predicate.Sheet(sql.FieldLTE(FieldRatio, v))
}

// ResultTimeEQ applies the EQ predicate on the "result_time" field.
func ResultTimeEQ(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldEQ(FieldResultTime, v))
}

// ResultTimeNEQ applies the NEQ predicate on the "result_time" field.
func ResultTimeNEQ(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldNEQ(FieldResultTime, v))
}

// ResultTimeIn applies the In predicate on the "result_time" field.
func ResultTimeIn(vs ...time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldIn(FieldResultTime, vs...))
}

// ResultTimeNotIn applies the NotIn predicate on the "result_time" field.
func ResultTimeNotIn(vs ...time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldNotIn(FieldResultTime, vs...))
}

// ResultTimeGT applies the GT predicate on the "result_time" field.
func ResultTimeGT(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldGT(FieldResultTime, v))
}

// ResultTimeGTE applies the GTE predicate on the "result_time" field.
func ResultTimeGTE(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldGTE(FieldResultTime, v))
}

// ResultTimeLT applies the LT predicate on the "result_time" field.
func ResultTimeLT(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldLT(FieldResultTime, v))
}

// ResultTimeLTE applies the LTE predicate on the "result_time" field.
func ResultTimeLTE(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldLTE(FieldResultTime, v))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldLTE(FieldCreatedTime, v))
}

// UpdatedTimeEQ applies the EQ predicate on the "updated_time" field.
func UpdatedTimeEQ(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldEQ(FieldUpdatedTime, v))
}

// UpdatedTimeNEQ applies the NEQ predicate on the "updated_time" field.
func UpdatedTimeNEQ(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldNEQ(FieldUpdatedTime, v))
}

// UpdatedTimeIn applies the In predicate on the "updated_time" field.
func UpdatedTimeIn(vs ...time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeNotIn applies the NotIn predicate on the "updated_time" field.
func UpdatedTimeNotIn(vs ...time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldNotIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeGT applies the GT predicate on the "updated_time" field.
func UpdatedTimeGT(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldGT(FieldUpdatedTime, v))
}

// UpdatedTimeGTE applies the GTE predicate on the "updated_time" field.
func UpdatedTimeGTE(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldGTE(FieldUpdatedTime, v))
}

// UpdatedTimeLT applies the LT predicate on the "updated_time" field.
func UpdatedTimeLT(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldLT(FieldUpdatedTime, v))
}

// UpdatedTimeLTE applies the LTE predicate on the "updated_time" field.
func UpdatedTimeLTE(v time.Time) predicate.Sheet {
	return predicate.Sheet(sql.FieldLTE(FieldUpdatedTime, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int64) predicate.Sheet {
	return predicate.Sheet(sql.FieldLTE(FieldUserID, v))
}

// HasRecords applies the HasEdge predicate on the "records" edge.
func HasRecords() predicate.Sheet {
	return predicate.Sheet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RecordsTable, RecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecordsWith applies the HasEdge predicate on the "records" edge with a given conditions (other predicates).
func HasRecordsWith(preds ...predicate.Record) predicate.Sheet {
	return predicate.Sheet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RecordsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RecordsTable, RecordsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBetSetting applies the HasEdge predicate on the "bet_setting" edge.
func HasBetSetting() predicate.Sheet {
	return predicate.Sheet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BetSettingTable, BetSettingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBetSettingWith applies the HasEdge predicate on the "bet_setting" edge with a given conditions (other predicates).
func HasBetSettingWith(preds ...predicate.BetSetting) predicate.Sheet {
	return predicate.Sheet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BetSettingInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BetSettingTable, BetSettingColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Sheet) predicate.Sheet {
	return predicate.Sheet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Sheet) predicate.Sheet {
	return predicate.Sheet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Sheet) predicate.Sheet {
	return predicate.Sheet(func(s *sql.Selector) {
		p(s.Not())
	})
}
