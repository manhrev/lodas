// Code generated by ent, DO NOT EDIT.

package record

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldID, id))
}

// CashAmount applies equality check predicate on the "cash_amount" field. It's identical to CashAmountEQ.
func CashAmount(v int64) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldCashAmount, v))
}

// BetType applies equality check predicate on the "bet_type" field. It's identical to BetTypeEQ.
func BetType(v int64) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldBetType, v))
}

// CashIn applies equality check predicate on the "cash_in" field. It's identical to CashInEQ.
func CashIn(v int64) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldCashIn, v))
}

// CashOut applies equality check predicate on the "cash_out" field. It's identical to CashOutEQ.
func CashOut(v int64) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldCashOut, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldCreatedTime, v))
}

// CashAmountEQ applies the EQ predicate on the "cash_amount" field.
func CashAmountEQ(v int64) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldCashAmount, v))
}

// CashAmountNEQ applies the NEQ predicate on the "cash_amount" field.
func CashAmountNEQ(v int64) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldCashAmount, v))
}

// CashAmountIn applies the In predicate on the "cash_amount" field.
func CashAmountIn(vs ...int64) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldCashAmount, vs...))
}

// CashAmountNotIn applies the NotIn predicate on the "cash_amount" field.
func CashAmountNotIn(vs ...int64) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldCashAmount, vs...))
}

// CashAmountGT applies the GT predicate on the "cash_amount" field.
func CashAmountGT(v int64) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldCashAmount, v))
}

// CashAmountGTE applies the GTE predicate on the "cash_amount" field.
func CashAmountGTE(v int64) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldCashAmount, v))
}

// CashAmountLT applies the LT predicate on the "cash_amount" field.
func CashAmountLT(v int64) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldCashAmount, v))
}

// CashAmountLTE applies the LTE predicate on the "cash_amount" field.
func CashAmountLTE(v int64) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldCashAmount, v))
}

// BetTypeEQ applies the EQ predicate on the "bet_type" field.
func BetTypeEQ(v int64) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldBetType, v))
}

// BetTypeNEQ applies the NEQ predicate on the "bet_type" field.
func BetTypeNEQ(v int64) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldBetType, v))
}

// BetTypeIn applies the In predicate on the "bet_type" field.
func BetTypeIn(vs ...int64) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldBetType, vs...))
}

// BetTypeNotIn applies the NotIn predicate on the "bet_type" field.
func BetTypeNotIn(vs ...int64) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldBetType, vs...))
}

// BetTypeGT applies the GT predicate on the "bet_type" field.
func BetTypeGT(v int64) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldBetType, v))
}

// BetTypeGTE applies the GTE predicate on the "bet_type" field.
func BetTypeGTE(v int64) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldBetType, v))
}

// BetTypeLT applies the LT predicate on the "bet_type" field.
func BetTypeLT(v int64) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldBetType, v))
}

// BetTypeLTE applies the LTE predicate on the "bet_type" field.
func BetTypeLTE(v int64) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldBetType, v))
}

// CashInEQ applies the EQ predicate on the "cash_in" field.
func CashInEQ(v int64) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldCashIn, v))
}

// CashInNEQ applies the NEQ predicate on the "cash_in" field.
func CashInNEQ(v int64) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldCashIn, v))
}

// CashInIn applies the In predicate on the "cash_in" field.
func CashInIn(vs ...int64) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldCashIn, vs...))
}

// CashInNotIn applies the NotIn predicate on the "cash_in" field.
func CashInNotIn(vs ...int64) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldCashIn, vs...))
}

// CashInGT applies the GT predicate on the "cash_in" field.
func CashInGT(v int64) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldCashIn, v))
}

// CashInGTE applies the GTE predicate on the "cash_in" field.
func CashInGTE(v int64) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldCashIn, v))
}

// CashInLT applies the LT predicate on the "cash_in" field.
func CashInLT(v int64) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldCashIn, v))
}

// CashInLTE applies the LTE predicate on the "cash_in" field.
func CashInLTE(v int64) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldCashIn, v))
}

// CashInIsNil applies the IsNil predicate on the "cash_in" field.
func CashInIsNil() predicate.Record {
	return predicate.Record(sql.FieldIsNull(FieldCashIn))
}

// CashInNotNil applies the NotNil predicate on the "cash_in" field.
func CashInNotNil() predicate.Record {
	return predicate.Record(sql.FieldNotNull(FieldCashIn))
}

// CashOutEQ applies the EQ predicate on the "cash_out" field.
func CashOutEQ(v int64) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldCashOut, v))
}

// CashOutNEQ applies the NEQ predicate on the "cash_out" field.
func CashOutNEQ(v int64) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldCashOut, v))
}

// CashOutIn applies the In predicate on the "cash_out" field.
func CashOutIn(vs ...int64) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldCashOut, vs...))
}

// CashOutNotIn applies the NotIn predicate on the "cash_out" field.
func CashOutNotIn(vs ...int64) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldCashOut, vs...))
}

// CashOutGT applies the GT predicate on the "cash_out" field.
func CashOutGT(v int64) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldCashOut, v))
}

// CashOutGTE applies the GTE predicate on the "cash_out" field.
func CashOutGTE(v int64) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldCashOut, v))
}

// CashOutLT applies the LT predicate on the "cash_out" field.
func CashOutLT(v int64) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldCashOut, v))
}

// CashOutLTE applies the LTE predicate on the "cash_out" field.
func CashOutLTE(v int64) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldCashOut, v))
}

// CashOutIsNil applies the IsNil predicate on the "cash_out" field.
func CashOutIsNil() predicate.Record {
	return predicate.Record(sql.FieldIsNull(FieldCashOut))
}

// CashOutNotNil applies the NotNil predicate on the "cash_out" field.
func CashOutNotNil() predicate.Record {
	return predicate.Record(sql.FieldNotNull(FieldCashOut))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldCreatedTime, v))
}

// WinInfoIsNil applies the IsNil predicate on the "win_info" field.
func WinInfoIsNil() predicate.Record {
	return predicate.Record(sql.FieldIsNull(FieldWinInfo))
}

// WinInfoNotNil applies the NotNil predicate on the "win_info" field.
func WinInfoNotNil() predicate.Record {
	return predicate.Record(sql.FieldNotNull(FieldWinInfo))
}

// HasSheet applies the HasEdge predicate on the "sheet" edge.
func HasSheet() predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SheetTable, SheetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSheetWith applies the HasEdge predicate on the "sheet" edge with a given conditions (other predicates).
func HasSheetWith(preds ...predicate.Sheet) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SheetInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SheetTable, SheetColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Record) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Record) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Record) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		p(s.Not())
	})
}
