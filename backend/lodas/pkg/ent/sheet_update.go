// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/betsetting"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/predicate"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/record"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/sheet"
)

// SheetUpdate is the builder for updating Sheet entities.
type SheetUpdate struct {
	config
	hooks    []Hook
	mutation *SheetMutation
}

// Where appends a list predicates to the SheetUpdate builder.
func (su *SheetUpdate) Where(ps ...predicate.Sheet) *SheetUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetStatus sets the "status" field.
func (su *SheetUpdate) SetStatus(i int64) *SheetUpdate {
	su.mutation.ResetStatus()
	su.mutation.SetStatus(i)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SheetUpdate) SetNillableStatus(i *int64) *SheetUpdate {
	if i != nil {
		su.SetStatus(*i)
	}
	return su
}

// AddStatus adds i to the "status" field.
func (su *SheetUpdate) AddStatus(i int64) *SheetUpdate {
	su.mutation.AddStatus(i)
	return su
}

// SetName sets the "name" field.
func (su *SheetUpdate) SetName(s string) *SheetUpdate {
	su.mutation.SetName(s)
	return su
}

// SetArea sets the "area" field.
func (su *SheetUpdate) SetArea(i int64) *SheetUpdate {
	su.mutation.ResetArea()
	su.mutation.SetArea(i)
	return su
}

// SetNillableArea sets the "area" field if the given value is not nil.
func (su *SheetUpdate) SetNillableArea(i *int64) *SheetUpdate {
	if i != nil {
		su.SetArea(*i)
	}
	return su
}

// AddArea adds i to the "area" field.
func (su *SheetUpdate) AddArea(i int64) *SheetUpdate {
	su.mutation.AddArea(i)
	return su
}

// SetProvince sets the "province" field.
func (su *SheetUpdate) SetProvince(i int64) *SheetUpdate {
	su.mutation.ResetProvince()
	su.mutation.SetProvince(i)
	return su
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (su *SheetUpdate) SetNillableProvince(i *int64) *SheetUpdate {
	if i != nil {
		su.SetProvince(*i)
	}
	return su
}

// AddProvince adds i to the "province" field.
func (su *SheetUpdate) AddProvince(i int64) *SheetUpdate {
	su.mutation.AddProvince(i)
	return su
}

// SetRatio sets the "ratio" field.
func (su *SheetUpdate) SetRatio(f float64) *SheetUpdate {
	su.mutation.ResetRatio()
	su.mutation.SetRatio(f)
	return su
}

// SetNillableRatio sets the "ratio" field if the given value is not nil.
func (su *SheetUpdate) SetNillableRatio(f *float64) *SheetUpdate {
	if f != nil {
		su.SetRatio(*f)
	}
	return su
}

// AddRatio adds f to the "ratio" field.
func (su *SheetUpdate) AddRatio(f float64) *SheetUpdate {
	su.mutation.AddRatio(f)
	return su
}

// SetResultTime sets the "result_time" field.
func (su *SheetUpdate) SetResultTime(t time.Time) *SheetUpdate {
	su.mutation.SetResultTime(t)
	return su
}

// SetCreatedTime sets the "created_time" field.
func (su *SheetUpdate) SetCreatedTime(t time.Time) *SheetUpdate {
	su.mutation.SetCreatedTime(t)
	return su
}

// SetUpdatedTime sets the "updated_time" field.
func (su *SheetUpdate) SetUpdatedTime(t time.Time) *SheetUpdate {
	su.mutation.SetUpdatedTime(t)
	return su
}

// SetUserID sets the "user_id" field.
func (su *SheetUpdate) SetUserID(i int64) *SheetUpdate {
	su.mutation.ResetUserID()
	su.mutation.SetUserID(i)
	return su
}

// AddUserID adds i to the "user_id" field.
func (su *SheetUpdate) AddUserID(i int64) *SheetUpdate {
	su.mutation.AddUserID(i)
	return su
}

// AddRecordIDs adds the "records" edge to the Record entity by IDs.
func (su *SheetUpdate) AddRecordIDs(ids ...int64) *SheetUpdate {
	su.mutation.AddRecordIDs(ids...)
	return su
}

// AddRecords adds the "records" edges to the Record entity.
func (su *SheetUpdate) AddRecords(r ...*Record) *SheetUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.AddRecordIDs(ids...)
}

// SetBetSettingID sets the "bet_setting" edge to the BetSetting entity by ID.
func (su *SheetUpdate) SetBetSettingID(id int64) *SheetUpdate {
	su.mutation.SetBetSettingID(id)
	return su
}

// SetNillableBetSettingID sets the "bet_setting" edge to the BetSetting entity by ID if the given value is not nil.
func (su *SheetUpdate) SetNillableBetSettingID(id *int64) *SheetUpdate {
	if id != nil {
		su = su.SetBetSettingID(*id)
	}
	return su
}

// SetBetSetting sets the "bet_setting" edge to the BetSetting entity.
func (su *SheetUpdate) SetBetSetting(b *BetSetting) *SheetUpdate {
	return su.SetBetSettingID(b.ID)
}

// Mutation returns the SheetMutation object of the builder.
func (su *SheetUpdate) Mutation() *SheetMutation {
	return su.mutation
}

// ClearRecords clears all "records" edges to the Record entity.
func (su *SheetUpdate) ClearRecords() *SheetUpdate {
	su.mutation.ClearRecords()
	return su
}

// RemoveRecordIDs removes the "records" edge to Record entities by IDs.
func (su *SheetUpdate) RemoveRecordIDs(ids ...int64) *SheetUpdate {
	su.mutation.RemoveRecordIDs(ids...)
	return su
}

// RemoveRecords removes "records" edges to Record entities.
func (su *SheetUpdate) RemoveRecords(r ...*Record) *SheetUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.RemoveRecordIDs(ids...)
}

// ClearBetSetting clears the "bet_setting" edge to the BetSetting entity.
func (su *SheetUpdate) ClearBetSetting() *SheetUpdate {
	su.mutation.ClearBetSetting()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SheetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, SheetMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SheetUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SheetUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SheetUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SheetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sheet.Table,
			Columns: sheet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sheet.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(sheet.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedStatus(); ok {
		_spec.AddField(sheet.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(sheet.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Area(); ok {
		_spec.SetField(sheet.FieldArea, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedArea(); ok {
		_spec.AddField(sheet.FieldArea, field.TypeInt64, value)
	}
	if value, ok := su.mutation.Province(); ok {
		_spec.SetField(sheet.FieldProvince, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedProvince(); ok {
		_spec.AddField(sheet.FieldProvince, field.TypeInt64, value)
	}
	if value, ok := su.mutation.Ratio(); ok {
		_spec.SetField(sheet.FieldRatio, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedRatio(); ok {
		_spec.AddField(sheet.FieldRatio, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.ResultTime(); ok {
		_spec.SetField(sheet.FieldResultTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.CreatedTime(); ok {
		_spec.SetField(sheet.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdatedTime(); ok {
		_spec.SetField(sheet.FieldUpdatedTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.UserID(); ok {
		_spec.SetField(sheet.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedUserID(); ok {
		_spec.AddField(sheet.FieldUserID, field.TypeInt64, value)
	}
	if su.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sheet.RecordsTable,
			Columns: []string{sheet.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: record.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedRecordsIDs(); len(nodes) > 0 && !su.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sheet.RecordsTable,
			Columns: []string{sheet.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: record.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sheet.RecordsTable,
			Columns: []string{sheet.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: record.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.BetSettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sheet.BetSettingTable,
			Columns: []string{sheet.BetSettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: betsetting.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.BetSettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sheet.BetSettingTable,
			Columns: []string{sheet.BetSettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: betsetting.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sheet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SheetUpdateOne is the builder for updating a single Sheet entity.
type SheetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SheetMutation
}

// SetStatus sets the "status" field.
func (suo *SheetUpdateOne) SetStatus(i int64) *SheetUpdateOne {
	suo.mutation.ResetStatus()
	suo.mutation.SetStatus(i)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SheetUpdateOne) SetNillableStatus(i *int64) *SheetUpdateOne {
	if i != nil {
		suo.SetStatus(*i)
	}
	return suo
}

// AddStatus adds i to the "status" field.
func (suo *SheetUpdateOne) AddStatus(i int64) *SheetUpdateOne {
	suo.mutation.AddStatus(i)
	return suo
}

// SetName sets the "name" field.
func (suo *SheetUpdateOne) SetName(s string) *SheetUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetArea sets the "area" field.
func (suo *SheetUpdateOne) SetArea(i int64) *SheetUpdateOne {
	suo.mutation.ResetArea()
	suo.mutation.SetArea(i)
	return suo
}

// SetNillableArea sets the "area" field if the given value is not nil.
func (suo *SheetUpdateOne) SetNillableArea(i *int64) *SheetUpdateOne {
	if i != nil {
		suo.SetArea(*i)
	}
	return suo
}

// AddArea adds i to the "area" field.
func (suo *SheetUpdateOne) AddArea(i int64) *SheetUpdateOne {
	suo.mutation.AddArea(i)
	return suo
}

// SetProvince sets the "province" field.
func (suo *SheetUpdateOne) SetProvince(i int64) *SheetUpdateOne {
	suo.mutation.ResetProvince()
	suo.mutation.SetProvince(i)
	return suo
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (suo *SheetUpdateOne) SetNillableProvince(i *int64) *SheetUpdateOne {
	if i != nil {
		suo.SetProvince(*i)
	}
	return suo
}

// AddProvince adds i to the "province" field.
func (suo *SheetUpdateOne) AddProvince(i int64) *SheetUpdateOne {
	suo.mutation.AddProvince(i)
	return suo
}

// SetRatio sets the "ratio" field.
func (suo *SheetUpdateOne) SetRatio(f float64) *SheetUpdateOne {
	suo.mutation.ResetRatio()
	suo.mutation.SetRatio(f)
	return suo
}

// SetNillableRatio sets the "ratio" field if the given value is not nil.
func (suo *SheetUpdateOne) SetNillableRatio(f *float64) *SheetUpdateOne {
	if f != nil {
		suo.SetRatio(*f)
	}
	return suo
}

// AddRatio adds f to the "ratio" field.
func (suo *SheetUpdateOne) AddRatio(f float64) *SheetUpdateOne {
	suo.mutation.AddRatio(f)
	return suo
}

// SetResultTime sets the "result_time" field.
func (suo *SheetUpdateOne) SetResultTime(t time.Time) *SheetUpdateOne {
	suo.mutation.SetResultTime(t)
	return suo
}

// SetCreatedTime sets the "created_time" field.
func (suo *SheetUpdateOne) SetCreatedTime(t time.Time) *SheetUpdateOne {
	suo.mutation.SetCreatedTime(t)
	return suo
}

// SetUpdatedTime sets the "updated_time" field.
func (suo *SheetUpdateOne) SetUpdatedTime(t time.Time) *SheetUpdateOne {
	suo.mutation.SetUpdatedTime(t)
	return suo
}

// SetUserID sets the "user_id" field.
func (suo *SheetUpdateOne) SetUserID(i int64) *SheetUpdateOne {
	suo.mutation.ResetUserID()
	suo.mutation.SetUserID(i)
	return suo
}

// AddUserID adds i to the "user_id" field.
func (suo *SheetUpdateOne) AddUserID(i int64) *SheetUpdateOne {
	suo.mutation.AddUserID(i)
	return suo
}

// AddRecordIDs adds the "records" edge to the Record entity by IDs.
func (suo *SheetUpdateOne) AddRecordIDs(ids ...int64) *SheetUpdateOne {
	suo.mutation.AddRecordIDs(ids...)
	return suo
}

// AddRecords adds the "records" edges to the Record entity.
func (suo *SheetUpdateOne) AddRecords(r ...*Record) *SheetUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.AddRecordIDs(ids...)
}

// SetBetSettingID sets the "bet_setting" edge to the BetSetting entity by ID.
func (suo *SheetUpdateOne) SetBetSettingID(id int64) *SheetUpdateOne {
	suo.mutation.SetBetSettingID(id)
	return suo
}

// SetNillableBetSettingID sets the "bet_setting" edge to the BetSetting entity by ID if the given value is not nil.
func (suo *SheetUpdateOne) SetNillableBetSettingID(id *int64) *SheetUpdateOne {
	if id != nil {
		suo = suo.SetBetSettingID(*id)
	}
	return suo
}

// SetBetSetting sets the "bet_setting" edge to the BetSetting entity.
func (suo *SheetUpdateOne) SetBetSetting(b *BetSetting) *SheetUpdateOne {
	return suo.SetBetSettingID(b.ID)
}

// Mutation returns the SheetMutation object of the builder.
func (suo *SheetUpdateOne) Mutation() *SheetMutation {
	return suo.mutation
}

// ClearRecords clears all "records" edges to the Record entity.
func (suo *SheetUpdateOne) ClearRecords() *SheetUpdateOne {
	suo.mutation.ClearRecords()
	return suo
}

// RemoveRecordIDs removes the "records" edge to Record entities by IDs.
func (suo *SheetUpdateOne) RemoveRecordIDs(ids ...int64) *SheetUpdateOne {
	suo.mutation.RemoveRecordIDs(ids...)
	return suo
}

// RemoveRecords removes "records" edges to Record entities.
func (suo *SheetUpdateOne) RemoveRecords(r ...*Record) *SheetUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.RemoveRecordIDs(ids...)
}

// ClearBetSetting clears the "bet_setting" edge to the BetSetting entity.
func (suo *SheetUpdateOne) ClearBetSetting() *SheetUpdateOne {
	suo.mutation.ClearBetSetting()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SheetUpdateOne) Select(field string, fields ...string) *SheetUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Sheet entity.
func (suo *SheetUpdateOne) Save(ctx context.Context) (*Sheet, error) {
	return withHooks[*Sheet, SheetMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SheetUpdateOne) SaveX(ctx context.Context) *Sheet {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SheetUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SheetUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SheetUpdateOne) sqlSave(ctx context.Context) (_node *Sheet, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sheet.Table,
			Columns: sheet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sheet.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Sheet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sheet.FieldID)
		for _, f := range fields {
			if !sheet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sheet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(sheet.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedStatus(); ok {
		_spec.AddField(sheet.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(sheet.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Area(); ok {
		_spec.SetField(sheet.FieldArea, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedArea(); ok {
		_spec.AddField(sheet.FieldArea, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.Province(); ok {
		_spec.SetField(sheet.FieldProvince, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedProvince(); ok {
		_spec.AddField(sheet.FieldProvince, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.Ratio(); ok {
		_spec.SetField(sheet.FieldRatio, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedRatio(); ok {
		_spec.AddField(sheet.FieldRatio, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.ResultTime(); ok {
		_spec.SetField(sheet.FieldResultTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.CreatedTime(); ok {
		_spec.SetField(sheet.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdatedTime(); ok {
		_spec.SetField(sheet.FieldUpdatedTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UserID(); ok {
		_spec.SetField(sheet.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedUserID(); ok {
		_spec.AddField(sheet.FieldUserID, field.TypeInt64, value)
	}
	if suo.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sheet.RecordsTable,
			Columns: []string{sheet.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: record.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedRecordsIDs(); len(nodes) > 0 && !suo.mutation.RecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sheet.RecordsTable,
			Columns: []string{sheet.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: record.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sheet.RecordsTable,
			Columns: []string{sheet.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: record.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.BetSettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sheet.BetSettingTable,
			Columns: []string{sheet.BetSettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: betsetting.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.BetSettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sheet.BetSettingTable,
			Columns: []string{sheet.BetSettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: betsetting.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Sheet{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sheet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
