// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/result"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/schema"
)

// ResultCreate is the builder for creating a Result entity.
type ResultCreate struct {
	config
	mutation *ResultMutation
	hooks    []Hook
}

// SetProvince sets the "province" field.
func (rc *ResultCreate) SetProvince(i int64) *ResultCreate {
	rc.mutation.SetProvince(i)
	return rc
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (rc *ResultCreate) SetNillableProvince(i *int64) *ResultCreate {
	if i != nil {
		rc.SetProvince(*i)
	}
	return rc
}

// SetCreatedTime sets the "created_time" field.
func (rc *ResultCreate) SetCreatedTime(t time.Time) *ResultCreate {
	rc.mutation.SetCreatedTime(t)
	return rc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (rc *ResultCreate) SetNillableCreatedTime(t *time.Time) *ResultCreate {
	if t != nil {
		rc.SetCreatedTime(*t)
	}
	return rc
}

// SetPrizeMap sets the "prize_map" field.
func (rc *ResultCreate) SetPrizeMap(sm *schema.PrizeMap) *ResultCreate {
	rc.mutation.SetPrizeMap(sm)
	return rc
}

// SetID sets the "id" field.
func (rc *ResultCreate) SetID(i int64) *ResultCreate {
	rc.mutation.SetID(i)
	return rc
}

// Mutation returns the ResultMutation object of the builder.
func (rc *ResultCreate) Mutation() *ResultMutation {
	return rc.mutation
}

// Save creates the Result in the database.
func (rc *ResultCreate) Save(ctx context.Context) (*Result, error) {
	rc.defaults()
	return withHooks[*Result, ResultMutation](ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ResultCreate) SaveX(ctx context.Context) *Result {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ResultCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ResultCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ResultCreate) defaults() {
	if _, ok := rc.mutation.Province(); !ok {
		v := result.DefaultProvince
		rc.mutation.SetProvince(v)
	}
	if _, ok := rc.mutation.CreatedTime(); !ok {
		v := result.DefaultCreatedTime
		rc.mutation.SetCreatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ResultCreate) check() error {
	if _, ok := rc.mutation.Province(); !ok {
		return &ValidationError{Name: "province", err: errors.New(`ent: missing required field "Result.province"`)}
	}
	if _, ok := rc.mutation.CreatedTime(); !ok {
		return &ValidationError{Name: "created_time", err: errors.New(`ent: missing required field "Result.created_time"`)}
	}
	if _, ok := rc.mutation.PrizeMap(); !ok {
		return &ValidationError{Name: "prize_map", err: errors.New(`ent: missing required field "Result.prize_map"`)}
	}
	return nil
}

func (rc *ResultCreate) sqlSave(ctx context.Context) (*Result, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ResultCreate) createSpec() (*Result, *sqlgraph.CreateSpec) {
	var (
		_node = &Result{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: result.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: result.FieldID,
			},
		}
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Province(); ok {
		_spec.SetField(result.FieldProvince, field.TypeInt64, value)
		_node.Province = value
	}
	if value, ok := rc.mutation.CreatedTime(); ok {
		_spec.SetField(result.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = value
	}
	if value, ok := rc.mutation.PrizeMap(); ok {
		_spec.SetField(result.FieldPrizeMap, field.TypeJSON, value)
		_node.PrizeMap = value
	}
	return _node, _spec
}

// ResultCreateBulk is the builder for creating many Result entities in bulk.
type ResultCreateBulk struct {
	config
	builders []*ResultCreate
}

// Save creates the Result entities in the database.
func (rcb *ResultCreateBulk) Save(ctx context.Context) ([]*Result, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Result, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ResultCreateBulk) SaveX(ctx context.Context) []*Result {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ResultCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ResultCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
