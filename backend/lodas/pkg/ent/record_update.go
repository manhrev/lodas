// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/predicate"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/record"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/schema"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/sheet"
)

// RecordUpdate is the builder for updating Record entities.
type RecordUpdate struct {
	config
	hooks    []Hook
	mutation *RecordMutation
}

// Where appends a list predicates to the RecordUpdate builder.
func (ru *RecordUpdate) Where(ps ...predicate.Record) *RecordUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetNumbers sets the "numbers" field.
func (ru *RecordUpdate) SetNumbers(s []string) *RecordUpdate {
	ru.mutation.SetNumbers(s)
	return ru
}

// AppendNumbers appends s to the "numbers" field.
func (ru *RecordUpdate) AppendNumbers(s []string) *RecordUpdate {
	ru.mutation.AppendNumbers(s)
	return ru
}

// SetCashAmount sets the "cash_amount" field.
func (ru *RecordUpdate) SetCashAmount(i int64) *RecordUpdate {
	ru.mutation.ResetCashAmount()
	ru.mutation.SetCashAmount(i)
	return ru
}

// AddCashAmount adds i to the "cash_amount" field.
func (ru *RecordUpdate) AddCashAmount(i int64) *RecordUpdate {
	ru.mutation.AddCashAmount(i)
	return ru
}

// SetBetType sets the "bet_type" field.
func (ru *RecordUpdate) SetBetType(i int64) *RecordUpdate {
	ru.mutation.ResetBetType()
	ru.mutation.SetBetType(i)
	return ru
}

// SetNillableBetType sets the "bet_type" field if the given value is not nil.
func (ru *RecordUpdate) SetNillableBetType(i *int64) *RecordUpdate {
	if i != nil {
		ru.SetBetType(*i)
	}
	return ru
}

// AddBetType adds i to the "bet_type" field.
func (ru *RecordUpdate) AddBetType(i int64) *RecordUpdate {
	ru.mutation.AddBetType(i)
	return ru
}

// SetPrize sets the "prize" field.
func (ru *RecordUpdate) SetPrize(i []int) *RecordUpdate {
	ru.mutation.SetPrize(i)
	return ru
}

// AppendPrize appends i to the "prize" field.
func (ru *RecordUpdate) AppendPrize(i []int) *RecordUpdate {
	ru.mutation.AppendPrize(i)
	return ru
}

// SetCashIn sets the "cash_in" field.
func (ru *RecordUpdate) SetCashIn(i int64) *RecordUpdate {
	ru.mutation.ResetCashIn()
	ru.mutation.SetCashIn(i)
	return ru
}

// AddCashIn adds i to the "cash_in" field.
func (ru *RecordUpdate) AddCashIn(i int64) *RecordUpdate {
	ru.mutation.AddCashIn(i)
	return ru
}

// SetCashOut sets the "cash_out" field.
func (ru *RecordUpdate) SetCashOut(i int64) *RecordUpdate {
	ru.mutation.ResetCashOut()
	ru.mutation.SetCashOut(i)
	return ru
}

// AddCashOut adds i to the "cash_out" field.
func (ru *RecordUpdate) AddCashOut(i int64) *RecordUpdate {
	ru.mutation.AddCashOut(i)
	return ru
}

// SetCreatedTime sets the "created_time" field.
func (ru *RecordUpdate) SetCreatedTime(t time.Time) *RecordUpdate {
	ru.mutation.SetCreatedTime(t)
	return ru
}

// SetWinInfo sets the "win_info" field.
func (ru *RecordUpdate) SetWinInfo(sm *schema.PrizeMap) *RecordUpdate {
	ru.mutation.SetWinInfo(sm)
	return ru
}

// SetSheetID sets the "sheet" edge to the Sheet entity by ID.
func (ru *RecordUpdate) SetSheetID(id int64) *RecordUpdate {
	ru.mutation.SetSheetID(id)
	return ru
}

// SetNillableSheetID sets the "sheet" edge to the Sheet entity by ID if the given value is not nil.
func (ru *RecordUpdate) SetNillableSheetID(id *int64) *RecordUpdate {
	if id != nil {
		ru = ru.SetSheetID(*id)
	}
	return ru
}

// SetSheet sets the "sheet" edge to the Sheet entity.
func (ru *RecordUpdate) SetSheet(s *Sheet) *RecordUpdate {
	return ru.SetSheetID(s.ID)
}

// Mutation returns the RecordMutation object of the builder.
func (ru *RecordUpdate) Mutation() *RecordMutation {
	return ru.mutation
}

// ClearSheet clears the "sheet" edge to the Sheet entity.
func (ru *RecordUpdate) ClearSheet() *RecordUpdate {
	ru.mutation.ClearSheet()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, RecordMutation](ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RecordUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RecordUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RecordUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   record.Table,
			Columns: record.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: record.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Numbers(); ok {
		_spec.SetField(record.FieldNumbers, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedNumbers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, record.FieldNumbers, value)
		})
	}
	if value, ok := ru.mutation.CashAmount(); ok {
		_spec.SetField(record.FieldCashAmount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedCashAmount(); ok {
		_spec.AddField(record.FieldCashAmount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.BetType(); ok {
		_spec.SetField(record.FieldBetType, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedBetType(); ok {
		_spec.AddField(record.FieldBetType, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.Prize(); ok {
		_spec.SetField(record.FieldPrize, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedPrize(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, record.FieldPrize, value)
		})
	}
	if value, ok := ru.mutation.CashIn(); ok {
		_spec.SetField(record.FieldCashIn, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedCashIn(); ok {
		_spec.AddField(record.FieldCashIn, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.CashOut(); ok {
		_spec.SetField(record.FieldCashOut, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedCashOut(); ok {
		_spec.AddField(record.FieldCashOut, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.CreatedTime(); ok {
		_spec.SetField(record.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := ru.mutation.WinInfo(); ok {
		_spec.SetField(record.FieldWinInfo, field.TypeJSON, value)
	}
	if ru.mutation.SheetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.SheetTable,
			Columns: []string{record.SheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sheet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.SheetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.SheetTable,
			Columns: []string{record.SheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sheet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{record.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RecordUpdateOne is the builder for updating a single Record entity.
type RecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecordMutation
}

// SetNumbers sets the "numbers" field.
func (ruo *RecordUpdateOne) SetNumbers(s []string) *RecordUpdateOne {
	ruo.mutation.SetNumbers(s)
	return ruo
}

// AppendNumbers appends s to the "numbers" field.
func (ruo *RecordUpdateOne) AppendNumbers(s []string) *RecordUpdateOne {
	ruo.mutation.AppendNumbers(s)
	return ruo
}

// SetCashAmount sets the "cash_amount" field.
func (ruo *RecordUpdateOne) SetCashAmount(i int64) *RecordUpdateOne {
	ruo.mutation.ResetCashAmount()
	ruo.mutation.SetCashAmount(i)
	return ruo
}

// AddCashAmount adds i to the "cash_amount" field.
func (ruo *RecordUpdateOne) AddCashAmount(i int64) *RecordUpdateOne {
	ruo.mutation.AddCashAmount(i)
	return ruo
}

// SetBetType sets the "bet_type" field.
func (ruo *RecordUpdateOne) SetBetType(i int64) *RecordUpdateOne {
	ruo.mutation.ResetBetType()
	ruo.mutation.SetBetType(i)
	return ruo
}

// SetNillableBetType sets the "bet_type" field if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableBetType(i *int64) *RecordUpdateOne {
	if i != nil {
		ruo.SetBetType(*i)
	}
	return ruo
}

// AddBetType adds i to the "bet_type" field.
func (ruo *RecordUpdateOne) AddBetType(i int64) *RecordUpdateOne {
	ruo.mutation.AddBetType(i)
	return ruo
}

// SetPrize sets the "prize" field.
func (ruo *RecordUpdateOne) SetPrize(i []int) *RecordUpdateOne {
	ruo.mutation.SetPrize(i)
	return ruo
}

// AppendPrize appends i to the "prize" field.
func (ruo *RecordUpdateOne) AppendPrize(i []int) *RecordUpdateOne {
	ruo.mutation.AppendPrize(i)
	return ruo
}

// SetCashIn sets the "cash_in" field.
func (ruo *RecordUpdateOne) SetCashIn(i int64) *RecordUpdateOne {
	ruo.mutation.ResetCashIn()
	ruo.mutation.SetCashIn(i)
	return ruo
}

// AddCashIn adds i to the "cash_in" field.
func (ruo *RecordUpdateOne) AddCashIn(i int64) *RecordUpdateOne {
	ruo.mutation.AddCashIn(i)
	return ruo
}

// SetCashOut sets the "cash_out" field.
func (ruo *RecordUpdateOne) SetCashOut(i int64) *RecordUpdateOne {
	ruo.mutation.ResetCashOut()
	ruo.mutation.SetCashOut(i)
	return ruo
}

// AddCashOut adds i to the "cash_out" field.
func (ruo *RecordUpdateOne) AddCashOut(i int64) *RecordUpdateOne {
	ruo.mutation.AddCashOut(i)
	return ruo
}

// SetCreatedTime sets the "created_time" field.
func (ruo *RecordUpdateOne) SetCreatedTime(t time.Time) *RecordUpdateOne {
	ruo.mutation.SetCreatedTime(t)
	return ruo
}

// SetWinInfo sets the "win_info" field.
func (ruo *RecordUpdateOne) SetWinInfo(sm *schema.PrizeMap) *RecordUpdateOne {
	ruo.mutation.SetWinInfo(sm)
	return ruo
}

// SetSheetID sets the "sheet" edge to the Sheet entity by ID.
func (ruo *RecordUpdateOne) SetSheetID(id int64) *RecordUpdateOne {
	ruo.mutation.SetSheetID(id)
	return ruo
}

// SetNillableSheetID sets the "sheet" edge to the Sheet entity by ID if the given value is not nil.
func (ruo *RecordUpdateOne) SetNillableSheetID(id *int64) *RecordUpdateOne {
	if id != nil {
		ruo = ruo.SetSheetID(*id)
	}
	return ruo
}

// SetSheet sets the "sheet" edge to the Sheet entity.
func (ruo *RecordUpdateOne) SetSheet(s *Sheet) *RecordUpdateOne {
	return ruo.SetSheetID(s.ID)
}

// Mutation returns the RecordMutation object of the builder.
func (ruo *RecordUpdateOne) Mutation() *RecordMutation {
	return ruo.mutation
}

// ClearSheet clears the "sheet" edge to the Sheet entity.
func (ruo *RecordUpdateOne) ClearSheet() *RecordUpdateOne {
	ruo.mutation.ClearSheet()
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RecordUpdateOne) Select(field string, fields ...string) *RecordUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Record entity.
func (ruo *RecordUpdateOne) Save(ctx context.Context) (*Record, error) {
	return withHooks[*Record, RecordMutation](ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RecordUpdateOne) SaveX(ctx context.Context) *Record {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RecordUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RecordUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RecordUpdateOne) sqlSave(ctx context.Context) (_node *Record, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   record.Table,
			Columns: record.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: record.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Record.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, record.FieldID)
		for _, f := range fields {
			if !record.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != record.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Numbers(); ok {
		_spec.SetField(record.FieldNumbers, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedNumbers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, record.FieldNumbers, value)
		})
	}
	if value, ok := ruo.mutation.CashAmount(); ok {
		_spec.SetField(record.FieldCashAmount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedCashAmount(); ok {
		_spec.AddField(record.FieldCashAmount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.BetType(); ok {
		_spec.SetField(record.FieldBetType, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedBetType(); ok {
		_spec.AddField(record.FieldBetType, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.Prize(); ok {
		_spec.SetField(record.FieldPrize, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedPrize(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, record.FieldPrize, value)
		})
	}
	if value, ok := ruo.mutation.CashIn(); ok {
		_spec.SetField(record.FieldCashIn, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedCashIn(); ok {
		_spec.AddField(record.FieldCashIn, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.CashOut(); ok {
		_spec.SetField(record.FieldCashOut, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedCashOut(); ok {
		_spec.AddField(record.FieldCashOut, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.CreatedTime(); ok {
		_spec.SetField(record.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.WinInfo(); ok {
		_spec.SetField(record.FieldWinInfo, field.TypeJSON, value)
	}
	if ruo.mutation.SheetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.SheetTable,
			Columns: []string{record.SheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sheet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.SheetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.SheetTable,
			Columns: []string{record.SheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sheet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Record{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{record.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
