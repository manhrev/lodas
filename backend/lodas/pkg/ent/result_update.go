// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/predicate"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/result"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/schema"
)

// ResultUpdate is the builder for updating Result entities.
type ResultUpdate struct {
	config
	hooks    []Hook
	mutation *ResultMutation
}

// Where appends a list predicates to the ResultUpdate builder.
func (ru *ResultUpdate) Where(ps ...predicate.Result) *ResultUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetProvince sets the "province" field.
func (ru *ResultUpdate) SetProvince(i int64) *ResultUpdate {
	ru.mutation.ResetProvince()
	ru.mutation.SetProvince(i)
	return ru
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (ru *ResultUpdate) SetNillableProvince(i *int64) *ResultUpdate {
	if i != nil {
		ru.SetProvince(*i)
	}
	return ru
}

// AddProvince adds i to the "province" field.
func (ru *ResultUpdate) AddProvince(i int64) *ResultUpdate {
	ru.mutation.AddProvince(i)
	return ru
}

// SetCreatedTime sets the "created_time" field.
func (ru *ResultUpdate) SetCreatedTime(t time.Time) *ResultUpdate {
	ru.mutation.SetCreatedTime(t)
	return ru
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (ru *ResultUpdate) SetNillableCreatedTime(t *time.Time) *ResultUpdate {
	if t != nil {
		ru.SetCreatedTime(*t)
	}
	return ru
}

// SetPrizeMap sets the "prize_map" field.
func (ru *ResultUpdate) SetPrizeMap(sm *schema.PrizeMap) *ResultUpdate {
	ru.mutation.SetPrizeMap(sm)
	return ru
}

// Mutation returns the ResultMutation object of the builder.
func (ru *ResultUpdate) Mutation() *ResultMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ResultUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ResultMutation](ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ResultUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ResultUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ResultUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *ResultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   result.Table,
			Columns: result.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: result.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Province(); ok {
		_spec.SetField(result.FieldProvince, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedProvince(); ok {
		_spec.AddField(result.FieldProvince, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.CreatedTime(); ok {
		_spec.SetField(result.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := ru.mutation.PrizeMap(); ok {
		_spec.SetField(result.FieldPrizeMap, field.TypeJSON, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{result.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ResultUpdateOne is the builder for updating a single Result entity.
type ResultUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResultMutation
}

// SetProvince sets the "province" field.
func (ruo *ResultUpdateOne) SetProvince(i int64) *ResultUpdateOne {
	ruo.mutation.ResetProvince()
	ruo.mutation.SetProvince(i)
	return ruo
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (ruo *ResultUpdateOne) SetNillableProvince(i *int64) *ResultUpdateOne {
	if i != nil {
		ruo.SetProvince(*i)
	}
	return ruo
}

// AddProvince adds i to the "province" field.
func (ruo *ResultUpdateOne) AddProvince(i int64) *ResultUpdateOne {
	ruo.mutation.AddProvince(i)
	return ruo
}

// SetCreatedTime sets the "created_time" field.
func (ruo *ResultUpdateOne) SetCreatedTime(t time.Time) *ResultUpdateOne {
	ruo.mutation.SetCreatedTime(t)
	return ruo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (ruo *ResultUpdateOne) SetNillableCreatedTime(t *time.Time) *ResultUpdateOne {
	if t != nil {
		ruo.SetCreatedTime(*t)
	}
	return ruo
}

// SetPrizeMap sets the "prize_map" field.
func (ruo *ResultUpdateOne) SetPrizeMap(sm *schema.PrizeMap) *ResultUpdateOne {
	ruo.mutation.SetPrizeMap(sm)
	return ruo
}

// Mutation returns the ResultMutation object of the builder.
func (ruo *ResultUpdateOne) Mutation() *ResultMutation {
	return ruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ResultUpdateOne) Select(field string, fields ...string) *ResultUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Result entity.
func (ruo *ResultUpdateOne) Save(ctx context.Context) (*Result, error) {
	return withHooks[*Result, ResultMutation](ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ResultUpdateOne) SaveX(ctx context.Context) *Result {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ResultUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ResultUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *ResultUpdateOne) sqlSave(ctx context.Context) (_node *Result, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   result.Table,
			Columns: result.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: result.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Result.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, result.FieldID)
		for _, f := range fields {
			if !result.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != result.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Province(); ok {
		_spec.SetField(result.FieldProvince, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedProvince(); ok {
		_spec.AddField(result.FieldProvince, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.CreatedTime(); ok {
		_spec.SetField(result.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.PrizeMap(); ok {
		_spec.SetField(result.FieldPrizeMap, field.TypeJSON, value)
	}
	_node = &Result{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{result.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
