// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/record"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/schema"
	"github.com/manhrev/lodas/backend/lodas/pkg/ent/sheet"
)

// RecordCreate is the builder for creating a Record entity.
type RecordCreate struct {
	config
	mutation *RecordMutation
	hooks    []Hook
}

// SetNumbers sets the "numbers" field.
func (rc *RecordCreate) SetNumbers(s []string) *RecordCreate {
	rc.mutation.SetNumbers(s)
	return rc
}

// SetCashAmount sets the "cash_amount" field.
func (rc *RecordCreate) SetCashAmount(i int64) *RecordCreate {
	rc.mutation.SetCashAmount(i)
	return rc
}

// SetBetType sets the "bet_type" field.
func (rc *RecordCreate) SetBetType(i int64) *RecordCreate {
	rc.mutation.SetBetType(i)
	return rc
}

// SetNillableBetType sets the "bet_type" field if the given value is not nil.
func (rc *RecordCreate) SetNillableBetType(i *int64) *RecordCreate {
	if i != nil {
		rc.SetBetType(*i)
	}
	return rc
}

// SetPrize sets the "prize" field.
func (rc *RecordCreate) SetPrize(i []int) *RecordCreate {
	rc.mutation.SetPrize(i)
	return rc
}

// SetCashIn sets the "cash_in" field.
func (rc *RecordCreate) SetCashIn(i int64) *RecordCreate {
	rc.mutation.SetCashIn(i)
	return rc
}

// SetNillableCashIn sets the "cash_in" field if the given value is not nil.
func (rc *RecordCreate) SetNillableCashIn(i *int64) *RecordCreate {
	if i != nil {
		rc.SetCashIn(*i)
	}
	return rc
}

// SetCashOut sets the "cash_out" field.
func (rc *RecordCreate) SetCashOut(i int64) *RecordCreate {
	rc.mutation.SetCashOut(i)
	return rc
}

// SetNillableCashOut sets the "cash_out" field if the given value is not nil.
func (rc *RecordCreate) SetNillableCashOut(i *int64) *RecordCreate {
	if i != nil {
		rc.SetCashOut(*i)
	}
	return rc
}

// SetCreatedTime sets the "created_time" field.
func (rc *RecordCreate) SetCreatedTime(t time.Time) *RecordCreate {
	rc.mutation.SetCreatedTime(t)
	return rc
}

// SetWinInfo sets the "win_info" field.
func (rc *RecordCreate) SetWinInfo(sm *schema.PrizeMap) *RecordCreate {
	rc.mutation.SetWinInfo(sm)
	return rc
}

// SetID sets the "id" field.
func (rc *RecordCreate) SetID(i int64) *RecordCreate {
	rc.mutation.SetID(i)
	return rc
}

// SetSheetID sets the "sheet" edge to the Sheet entity by ID.
func (rc *RecordCreate) SetSheetID(id int64) *RecordCreate {
	rc.mutation.SetSheetID(id)
	return rc
}

// SetNillableSheetID sets the "sheet" edge to the Sheet entity by ID if the given value is not nil.
func (rc *RecordCreate) SetNillableSheetID(id *int64) *RecordCreate {
	if id != nil {
		rc = rc.SetSheetID(*id)
	}
	return rc
}

// SetSheet sets the "sheet" edge to the Sheet entity.
func (rc *RecordCreate) SetSheet(s *Sheet) *RecordCreate {
	return rc.SetSheetID(s.ID)
}

// Mutation returns the RecordMutation object of the builder.
func (rc *RecordCreate) Mutation() *RecordMutation {
	return rc.mutation
}

// Save creates the Record in the database.
func (rc *RecordCreate) Save(ctx context.Context) (*Record, error) {
	rc.defaults()
	return withHooks[*Record, RecordMutation](ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RecordCreate) SaveX(ctx context.Context) *Record {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RecordCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RecordCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RecordCreate) defaults() {
	if _, ok := rc.mutation.BetType(); !ok {
		v := record.DefaultBetType
		rc.mutation.SetBetType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RecordCreate) check() error {
	if _, ok := rc.mutation.Numbers(); !ok {
		return &ValidationError{Name: "numbers", err: errors.New(`ent: missing required field "Record.numbers"`)}
	}
	if _, ok := rc.mutation.CashAmount(); !ok {
		return &ValidationError{Name: "cash_amount", err: errors.New(`ent: missing required field "Record.cash_amount"`)}
	}
	if _, ok := rc.mutation.BetType(); !ok {
		return &ValidationError{Name: "bet_type", err: errors.New(`ent: missing required field "Record.bet_type"`)}
	}
	if _, ok := rc.mutation.Prize(); !ok {
		return &ValidationError{Name: "prize", err: errors.New(`ent: missing required field "Record.prize"`)}
	}
	if _, ok := rc.mutation.CreatedTime(); !ok {
		return &ValidationError{Name: "created_time", err: errors.New(`ent: missing required field "Record.created_time"`)}
	}
	return nil
}

func (rc *RecordCreate) sqlSave(ctx context.Context) (*Record, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RecordCreate) createSpec() (*Record, *sqlgraph.CreateSpec) {
	var (
		_node = &Record{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: record.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: record.FieldID,
			},
		}
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Numbers(); ok {
		_spec.SetField(record.FieldNumbers, field.TypeJSON, value)
		_node.Numbers = value
	}
	if value, ok := rc.mutation.CashAmount(); ok {
		_spec.SetField(record.FieldCashAmount, field.TypeInt64, value)
		_node.CashAmount = value
	}
	if value, ok := rc.mutation.BetType(); ok {
		_spec.SetField(record.FieldBetType, field.TypeInt64, value)
		_node.BetType = value
	}
	if value, ok := rc.mutation.Prize(); ok {
		_spec.SetField(record.FieldPrize, field.TypeJSON, value)
		_node.Prize = value
	}
	if value, ok := rc.mutation.CashIn(); ok {
		_spec.SetField(record.FieldCashIn, field.TypeInt64, value)
		_node.CashIn = value
	}
	if value, ok := rc.mutation.CashOut(); ok {
		_spec.SetField(record.FieldCashOut, field.TypeInt64, value)
		_node.CashOut = value
	}
	if value, ok := rc.mutation.CreatedTime(); ok {
		_spec.SetField(record.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = value
	}
	if value, ok := rc.mutation.WinInfo(); ok {
		_spec.SetField(record.FieldWinInfo, field.TypeJSON, value)
		_node.WinInfo = value
	}
	if nodes := rc.mutation.SheetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   record.SheetTable,
			Columns: []string{record.SheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sheet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.sheet_records = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RecordCreateBulk is the builder for creating many Record entities in bulk.
type RecordCreateBulk struct {
	config
	builders []*RecordCreate
}

// Save creates the Record entities in the database.
func (rcb *RecordCreateBulk) Save(ctx context.Context) ([]*Record, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Record, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RecordCreateBulk) SaveX(ctx context.Context) []*Record {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RecordCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RecordCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
