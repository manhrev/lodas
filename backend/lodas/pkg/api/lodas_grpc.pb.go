// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/lodas.proto

package lodas

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LodasClient is the client API for Lodas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LodasClient interface {
	CreateSheet(ctx context.Context, in *CreateSheetRequest, opts ...grpc.CallOption) (*CreateSheetReply, error)
	DeleteSheet(ctx context.Context, in *DeleteSheetRequest, opts ...grpc.CallOption) (*DeleteSheetReply, error)
	UpdateSheet(ctx context.Context, in *UpdateSheetRequest, opts ...grpc.CallOption) (*UpdateSheetReply, error)
	ListSheets(ctx context.Context, in *ListSheetsRequest, opts ...grpc.CallOption) (*ListSheetsReply, error)
	SubmitSheet(ctx context.Context, in *SubmitSheetRequest, opts ...grpc.CallOption) (*SubmitSheetReply, error)
	ListRecords(ctx context.Context, in *ListRecordsRequest, opts ...grpc.CallOption) (*ListRecordsReply, error)
	CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordReply, error)
	DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*DeleteRecordReply, error)
	CreateBetSetting(ctx context.Context, in *CreateBetSettingRequest, opts ...grpc.CallOption) (*CreateBetSettingReply, error)
	GetBetSetting(ctx context.Context, in *GetBetSettingRequest, opts ...grpc.CallOption) (*GetBetSettingReply, error)
}

type lodasClient struct {
	cc grpc.ClientConnInterface
}

func NewLodasClient(cc grpc.ClientConnInterface) LodasClient {
	return &lodasClient{cc}
}

func (c *lodasClient) CreateSheet(ctx context.Context, in *CreateSheetRequest, opts ...grpc.CallOption) (*CreateSheetReply, error) {
	out := new(CreateSheetReply)
	err := c.cc.Invoke(ctx, "/lodas.Lodas/CreateSheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lodasClient) DeleteSheet(ctx context.Context, in *DeleteSheetRequest, opts ...grpc.CallOption) (*DeleteSheetReply, error) {
	out := new(DeleteSheetReply)
	err := c.cc.Invoke(ctx, "/lodas.Lodas/DeleteSheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lodasClient) UpdateSheet(ctx context.Context, in *UpdateSheetRequest, opts ...grpc.CallOption) (*UpdateSheetReply, error) {
	out := new(UpdateSheetReply)
	err := c.cc.Invoke(ctx, "/lodas.Lodas/UpdateSheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lodasClient) ListSheets(ctx context.Context, in *ListSheetsRequest, opts ...grpc.CallOption) (*ListSheetsReply, error) {
	out := new(ListSheetsReply)
	err := c.cc.Invoke(ctx, "/lodas.Lodas/ListSheets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lodasClient) SubmitSheet(ctx context.Context, in *SubmitSheetRequest, opts ...grpc.CallOption) (*SubmitSheetReply, error) {
	out := new(SubmitSheetReply)
	err := c.cc.Invoke(ctx, "/lodas.Lodas/SubmitSheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lodasClient) ListRecords(ctx context.Context, in *ListRecordsRequest, opts ...grpc.CallOption) (*ListRecordsReply, error) {
	out := new(ListRecordsReply)
	err := c.cc.Invoke(ctx, "/lodas.Lodas/ListRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lodasClient) CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordReply, error) {
	out := new(CreateRecordReply)
	err := c.cc.Invoke(ctx, "/lodas.Lodas/CreateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lodasClient) DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*DeleteRecordReply, error) {
	out := new(DeleteRecordReply)
	err := c.cc.Invoke(ctx, "/lodas.Lodas/DeleteRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lodasClient) CreateBetSetting(ctx context.Context, in *CreateBetSettingRequest, opts ...grpc.CallOption) (*CreateBetSettingReply, error) {
	out := new(CreateBetSettingReply)
	err := c.cc.Invoke(ctx, "/lodas.Lodas/CreateBetSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lodasClient) GetBetSetting(ctx context.Context, in *GetBetSettingRequest, opts ...grpc.CallOption) (*GetBetSettingReply, error) {
	out := new(GetBetSettingReply)
	err := c.cc.Invoke(ctx, "/lodas.Lodas/GetBetSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LodasServer is the server API for Lodas service.
// All implementations must embed UnimplementedLodasServer
// for forward compatibility
type LodasServer interface {
	CreateSheet(context.Context, *CreateSheetRequest) (*CreateSheetReply, error)
	DeleteSheet(context.Context, *DeleteSheetRequest) (*DeleteSheetReply, error)
	UpdateSheet(context.Context, *UpdateSheetRequest) (*UpdateSheetReply, error)
	ListSheets(context.Context, *ListSheetsRequest) (*ListSheetsReply, error)
	SubmitSheet(context.Context, *SubmitSheetRequest) (*SubmitSheetReply, error)
	ListRecords(context.Context, *ListRecordsRequest) (*ListRecordsReply, error)
	CreateRecord(context.Context, *CreateRecordRequest) (*CreateRecordReply, error)
	DeleteRecord(context.Context, *DeleteRecordRequest) (*DeleteRecordReply, error)
	CreateBetSetting(context.Context, *CreateBetSettingRequest) (*CreateBetSettingReply, error)
	GetBetSetting(context.Context, *GetBetSettingRequest) (*GetBetSettingReply, error)
	mustEmbedUnimplementedLodasServer()
}

// UnimplementedLodasServer must be embedded to have forward compatible implementations.
type UnimplementedLodasServer struct {
}

func (UnimplementedLodasServer) CreateSheet(context.Context, *CreateSheetRequest) (*CreateSheetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSheet not implemented")
}
func (UnimplementedLodasServer) DeleteSheet(context.Context, *DeleteSheetRequest) (*DeleteSheetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSheet not implemented")
}
func (UnimplementedLodasServer) UpdateSheet(context.Context, *UpdateSheetRequest) (*UpdateSheetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSheet not implemented")
}
func (UnimplementedLodasServer) ListSheets(context.Context, *ListSheetsRequest) (*ListSheetsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSheets not implemented")
}
func (UnimplementedLodasServer) SubmitSheet(context.Context, *SubmitSheetRequest) (*SubmitSheetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSheet not implemented")
}
func (UnimplementedLodasServer) ListRecords(context.Context, *ListRecordsRequest) (*ListRecordsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecords not implemented")
}
func (UnimplementedLodasServer) CreateRecord(context.Context, *CreateRecordRequest) (*CreateRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (UnimplementedLodasServer) DeleteRecord(context.Context, *DeleteRecordRequest) (*DeleteRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (UnimplementedLodasServer) CreateBetSetting(context.Context, *CreateBetSettingRequest) (*CreateBetSettingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBetSetting not implemented")
}
func (UnimplementedLodasServer) GetBetSetting(context.Context, *GetBetSettingRequest) (*GetBetSettingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBetSetting not implemented")
}
func (UnimplementedLodasServer) mustEmbedUnimplementedLodasServer() {}

// UnsafeLodasServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LodasServer will
// result in compilation errors.
type UnsafeLodasServer interface {
	mustEmbedUnimplementedLodasServer()
}

func RegisterLodasServer(s grpc.ServiceRegistrar, srv LodasServer) {
	s.RegisterService(&Lodas_ServiceDesc, srv)
}

func _Lodas_CreateSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LodasServer).CreateSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lodas.Lodas/CreateSheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LodasServer).CreateSheet(ctx, req.(*CreateSheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lodas_DeleteSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LodasServer).DeleteSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lodas.Lodas/DeleteSheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LodasServer).DeleteSheet(ctx, req.(*DeleteSheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lodas_UpdateSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LodasServer).UpdateSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lodas.Lodas/UpdateSheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LodasServer).UpdateSheet(ctx, req.(*UpdateSheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lodas_ListSheets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSheetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LodasServer).ListSheets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lodas.Lodas/ListSheets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LodasServer).ListSheets(ctx, req.(*ListSheetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lodas_SubmitSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitSheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LodasServer).SubmitSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lodas.Lodas/SubmitSheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LodasServer).SubmitSheet(ctx, req.(*SubmitSheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lodas_ListRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LodasServer).ListRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lodas.Lodas/ListRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LodasServer).ListRecords(ctx, req.(*ListRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lodas_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LodasServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lodas.Lodas/CreateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LodasServer).CreateRecord(ctx, req.(*CreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lodas_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LodasServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lodas.Lodas/DeleteRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LodasServer).DeleteRecord(ctx, req.(*DeleteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lodas_CreateBetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBetSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LodasServer).CreateBetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lodas.Lodas/CreateBetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LodasServer).CreateBetSetting(ctx, req.(*CreateBetSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lodas_GetBetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBetSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LodasServer).GetBetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lodas.Lodas/GetBetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LodasServer).GetBetSetting(ctx, req.(*GetBetSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Lodas_ServiceDesc is the grpc.ServiceDesc for Lodas service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lodas_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lodas.Lodas",
	HandlerType: (*LodasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSheet",
			Handler:    _Lodas_CreateSheet_Handler,
		},
		{
			MethodName: "DeleteSheet",
			Handler:    _Lodas_DeleteSheet_Handler,
		},
		{
			MethodName: "UpdateSheet",
			Handler:    _Lodas_UpdateSheet_Handler,
		},
		{
			MethodName: "ListSheets",
			Handler:    _Lodas_ListSheets_Handler,
		},
		{
			MethodName: "SubmitSheet",
			Handler:    _Lodas_SubmitSheet_Handler,
		},
		{
			MethodName: "ListRecords",
			Handler:    _Lodas_ListRecords_Handler,
		},
		{
			MethodName: "CreateRecord",
			Handler:    _Lodas_CreateRecord_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _Lodas_DeleteRecord_Handler,
		},
		{
			MethodName: "CreateBetSetting",
			Handler:    _Lodas_CreateBetSetting_Handler,
		},
		{
			MethodName: "GetBetSetting",
			Handler:    _Lodas_GetBetSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/lodas.proto",
}
